#!/usr/local/bin/python3 
#-*- coding:utf-8 -*-

"""
Resolution of problem 2 of project Euler

Each new term in the Fibonacci sequence is generated by adding the previous 
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.

"""
import timeit

def even_value_fibonacci(maximum):
	values = [0,1]
	sum_even_values = 0

	while values[-2] + values[-1] < maximum:
		values.append(values[-2] + values[-1])

		# even-valued terms
		if(values[-1] % 2 == 0):
			sum_even_values += values[-1]

	return sum_even_values

def even_value_fibonacci2(maximum):
	""" without the memory hogs and lists """

	left = 0
	right = 1
	sum_even_values = 0

	while left < maximum:
		left,right = right, left + right
		if (left % 2 == 0):
			sum_even_values += left


	return sum_even_values

def wrapper(func, *args, **kwargs):
	def wrapped():
		return func(*args, **kwargs)
	return wrapped

def find_fastest():
	""" 
	Measure functions time of processing
	"""
	wrapped = wrapper(even_value_fibonacci,4000000)
	wrapped2 = wrapper(even_value_fibonacci2,4000000)

	print("-----Taking times-----")
	print("->First function:")
	print(timeit.timeit(wrapped,number=1000))
	print("->Second function:")
	print(timeit.timeit(wrapped2,number=1000))

if __name__ == "__main__":
	#find_fastest()
	#result = even_value_fibonacci(4000000)
	result = even_value_fibonacci2(4000000)
	print(result)
